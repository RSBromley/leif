name: Docker - Release

# Controls when the workflow will run
on:
  # Triggers the workflow only on a release-* tag
  push:
    tags:
      - 'release-*' # Push events to matching release-*, i.e. release-v1.0.0

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # github.event.base_ref to get the branch (we then split and pop)
  BRANCH: ${{ github.event.base_ref }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  vars:
    name: Output build variables
    runs-on: ubuntu-latest
    outputs:
      appImage: ${{ fromJSON(steps.variables.outputs.result).appImage }}
      imagePath: ${{ fromJSON(steps.variables.outputs.result).imagePath }}
      branch: ${{ fromJSON(steps.variables.outputs.result).branch }}
    steps:
      - id: variables
        name: Script CI variables
        uses: actions/github-script@v4
        with:
          script: |
            const { REGISTRY, IMAGE_NAME, BRANCH } = process.env;
            const branch = BRANCH.split('/').pop();
            const imagePath = `${REGISTRY}/${IMAGE_NAME}/${branch}`;
            const appImage = `${imagePath}/app`;
            core.info(`Commit to branch '${branch}'`);
            core.info(`Building docker image for '${appImage}'`);
            core.exportVariable('GITHUB_BRANCH_SLUG', branch);
            core.exportVariable('APP_IMAGE', appImage);
            return { appImage, imagePath, branch };

  build:
    runs-on: ubuntu-latest
    needs: vars
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set env variables
        run: |
          echo "APP_IMAGE=${{needs.vars.outputs.appImage}}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Docker image
        run: |
          docker pull ${{ env.APP_IMAGE }}:latest || true
          docker tag ${{ env.APP_IMAGE }}:latest ${{ env.APP_IMAGE }}:release
          docker push ${{ env.APP_IMAGE }}:release
